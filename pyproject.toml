[build-system]
requires = [
    # The pin is a workaround for editable installs breaking IDEs.
    # See this mypy issue: https://github.com/python/mypy/issues/13392#issuecomment-1213527559
    # and our note: https://zapatacomputing.atlassian.net/wiki/spaces/ORQSRUN/pages/519012482/Editable+installs
    "setuptools<=63",
    "wheel",
    "setuptools_scm>=6.0",
]

# Including this section is same as 'use_scm_version=True' in setup.py
# See https://github.com/pypa/setuptools_scm for guidance
[tool.setuptools_scm]

[tool.isort]
profile = "black"

[tool.mypy]
# Without this we would have to add an empty __init__.py file for every package.
namespace_packages = true
# Without this mypy complains about the same module being imported under different
# names. Note that this also requires setting `mypy_path`.
explicit_package_bases = true
# We usually keep our source code under `src/<namespace>/<library>/...` or
# `src/python/<namespace>/<library>...`. This option tells mypy to look under that
# directory path. If your repo has a different layout you can add the appropriate paths
# by setting MYPYPATH env variable.
mypy_path = "src:src/python"
exclude = [
    # Exclude anything in an examples directory, except the docs/examples dir.
    '^(?!docs\/examples\/).*examples\/.*$',
    # Exclude our test files where we invoke mypy from pytest.
    "tests/sdk/typing",
    # Workaround for misbehaving 3rd-party libraries.
    "src/orquestra/sdk/dremio/_flight_facade.py",
]
# Without this, mypy would skip typechecking functions that don't have type
# annotations in the signature.
check_untyped_defs = true

[tool.coverage.run]
omit = [
  # main.py should be checked separately in an integration test.
  "*/main.py",
  "*/__init__.py",
  # This is vendored source code from another project
  "src/orquestra/sdk/kubernetes/quantity.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "assert_never",
]

[tool.pytest.ini_options]
log_level="INFO"


[tool.ruff]
select = [
  "E",   # pycodestyle
  "W",   # pycodestyle
  "F",   # pyflakes
  "D",   # pydocstyle
]
ignore = ["E203","E266","D100","D101","D102","D103","D104","D105","D106","D107",]
target-version = "py38"

[tool.ruff.per-file-ignores]
"tests/*" = ["D"]

[tool.ruff.pydocstyle]
convention="google"

[tool.pymarkdown]
# Our CHANGELOG.md violates all these rules. We can remove them one-by-one when
# we fix the formatting. Rules reference:
# https://github.com/jackdewinter/pymarkdown/blob/main/docs/rules.md
plugins.md013.enabled = false

[tool.flake8]
style = 'google'
ignore = [
    'E203',     # whitespace before ':'
    'E266',     # Too many leading '#' for block comment
    'DOC201',   # Function/method does not have a return section in docstring
    'DOC203',   # Return type(s) in docstring not consistent with the return annotation
    'DOC301',   # `__init__()` should not have a docstring
    'W503'      # Line break occurred before a binary operator
]
per-file-ignores = [
    'abc.py:DOC501', # ABC docstrings don't need "raises NotImplementedError"
]
max-line-length = 88
count = true
arg-type-hints-in-docstring = false

[tool.pyright]
exclude = [
    "src/orquestra/sdk/_base/_dsl.py",
    "src/orquestra/sdk/_base/_logs/_markers.py",
    "src/orquestra/sdk/_base/_logs/_models.py",
    "src/orquestra/sdk/_base/_testing/_example_wfs.py",
    "src/orquestra/sdk/_base/_ast.py",
    # pyright 1.1.340 and newer hangs up when analyzing this file.
    "src/orquestra/sdk/_base/_traversal.py",
    "src/orquestra/sdk/_base/_workflow.py",
    "src/orquestra/sdk/_base/cli/_arg_resolvers.py",
    "src/orquestra/sdk/_base/cli/_dumpers.py",
    "src/orquestra/sdk/_base/cli/_entry.py",
    "src/orquestra/sdk/_base/cli/_login/_login.py",
    "src/orquestra/sdk/_base/cli/_task/_logs.py",
    "src/orquestra/sdk/_base/cli/_ui/_click_default_group.py",
    "src/orquestra/sdk/_base/cli/_ui/_prompts.py",
    "src/orquestra/sdk/_base/cli/_workflow/_logs.py",
    "src/orquestra/sdk/_base/serde.py",
    "src/orquestra/sdk/_ray/_build_workflow.py",
    "src/orquestra/sdk/_ray/_client.py",
    "src/orquestra/sdk/_ray/_dag.py",
    "src/orquestra/sdk/mlflow/_connection_utils.py",
    "src/orquestra/sdk/schema/workflow_run.py",
    "tests/cli/services/test_down.py",
    "tests/cli/services/test_up.py",
    "tests/cli/test_arg_resolvers.py",
    "tests/cli/test_login_list.py",
    "tests/cli/test_repos.py",
    "tests/cli/ui/test_presenters.py",
    "tests/cli/workflow/test_logs.py",
    "tests/runtime/ray/test_build_workflow.py",
    "tests/sdk/api/test_config.py",
    "tests/sdk/api/test_task_run.py",
    "tests/sdk/api/test_wf_run.py",
    "tests/sdk/secrets/test_client.py",
    "tests/sdk/test_artifact_future_methods.py",
    "tests/sdk/test_ast.py",
    "tests/sdk/test_consistent_return_shapes.py",
    "tests/sdk/test_dispatch.py",
    "tests/sdk/test_dispatch_integration.py",
    "tests/sdk/test_dsl.py",
    "tests/sdk/test_serde.py",
    "tests/sdk/test_traversal.py",
    "tests/sdk/typing/task/assign_n_outputs.py",
    "tests/sdk/typing/task/passed_keyword_as_positional.py",
    "tests/sdk/typing/task/passed_too_few_args.py",
    "tests/sdk/typing/task/passed_too_many_args.py",
    "tests/sdk/typing/task/passed_wrong_arg_type.py",
    "tests/sdk/typing/workflow/assign_model.py",
    "tests/sdk/typing/workflow/does_not_have_validate.py",
]
