################################################################################
# Â© Copyright 2022 Zapata Computing Inc.
################################################################################
"""
Recorded HTTP response data. Extracted from the test file because this usually
takes a lot of lines. Kept as a Python file for some DRY-ness.
"""


from typing import Any, List

from orquestra.sdk._base._driver._models import (
    TaskInvocationID,
    TaskRunID,
    WorkflowDefID,
    WorkflowRunID,
)
from orquestra.sdk._base.serde import result_from_artifact
from orquestra.sdk.schema.ir import ArtifactFormat, WorkflowDef
from orquestra.sdk.schema.responses import ComputeEngineWorkflowResult
from orquestra.sdk.schema.workflow_run import RunStatus, TaskRun

# --- Helpers ---
# These helpers are used to reduce code duplication when creating test responses

PLATFORM_TIME_FORMAT = "%Y-%m-%dT%H:%M:%S.%fZ"


def _wf_def_resp(id_: WorkflowDefID, wf_def: WorkflowDef):
    return {
        "id": id_,
        "created": "2022-11-23T18:58:13.86752161Z",
        "owner": "evil/emiliano.zapata@zapatacomputing.com",
        "workflow": wf_def.dict(),
        "workspaceId": "evil/emiliano.zapata@zapatacomputing.com",
        "project": "emiliano's project",
        "sdkVersion": "0x859",
    }


def _status_resp(status: RunStatus):
    _status = {"state": status.state.value}
    if status.start_time is not None:
        _status["startTime"] = status.start_time.strftime(PLATFORM_TIME_FORMAT)
    if status.end_time is not None:
        _status["endTime"] = status.end_time.strftime(PLATFORM_TIME_FORMAT)
    return _status


def _task_run_resp(
    id_: TaskRunID,
    task_invocation_id: TaskInvocationID,
    status: RunStatus,
):
    return {
        "id": id_,
        "invocationId": task_invocation_id,
        "status": _status_resp(status),
    }


def _wf_run_resp(
    id_: WorkflowRunID,
    workflow_def_id: WorkflowDefID,
    status: RunStatus,
    task_runs: List[TaskRun],
):
    return {
        "id": id_,
        "definitionId": workflow_def_id,
        "status": _status_resp(status),
        "owner": "evil/emiliano.zapata@zapatacomputing.com",
        "taskRuns": [
            _task_run_resp(t.id, t.invocation_id, t.status) for t in task_runs
        ],
    }


def _list_wf_run_resp(
    id_: WorkflowRunID,
    workflow_def_id: WorkflowDefID,
):
    return {
        "id": id_,
        "definitionId": workflow_def_id,
    }


# --- Workflow Definitions ---


def make_get_wf_def_response(id_: WorkflowDefID, wf_def: WorkflowDef):
    """
    Based on:
    https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/schemas/WorkflowDefinition.yaml
    """
    return {
        "data": _wf_def_resp(id_, wf_def),
    }


def make_list_wf_def_response(ids: List[WorkflowDefID], wf_defs: List[WorkflowDef]):
    return {
        "data": [_wf_def_resp(id_, wf_def) for id_, wf_def in zip(ids, wf_defs)],
    }


def make_list_wf_def_paginated_response(
    ids: List[WorkflowDefID], wf_defs: List[WorkflowDef]
):
    return {
        "data": [_wf_def_resp(id_, wf_def) for id_, wf_def in zip(ids, wf_defs)],
        "meta": {
            "nextPageToken": "1989-12-13T00:00:00.000000Z,"
            "00000000-0000-0000-0000-0000000000000",
        },
    }


def make_create_wf_def_response(id_: WorkflowDefID):
    """
    Based on:
    https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/responses/CreateWorkflowDefinitionResponse.yaml
    """
    return {"data": {"id": id_}}


def make_error_response(message: str, detail: str):
    """
    Based on:
    https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/schemas/Error.yaml
    """

    return {
        "message": message,
        "detail": detail,
    }


# --- Workflow Runs ---


def make_submit_wf_run_response(id_: WorkflowRunID):
    """
    Based on:
        https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/responses/CreateWorkflowRunResponse.yaml
    """
    return {"data": {"id": id_}}


def make_get_wf_run_response(
    id_: WorkflowRunID,
    workflow_def_id: WorkflowDefID,
    status: RunStatus,
    task_runs: List[TaskRun],
):
    """
    Based on:
        https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/schemas/WorkflowRun.yaml
    """
    return {"data": _wf_run_resp(id_, workflow_def_id, status, task_runs)}


def make_get_wf_run_missing_task_run_status(
    id_: WorkflowRunID, workflow_def_id: WorkflowDefID, status: RunStatus
):
    wf_run = {"data": _wf_run_resp(id_, workflow_def_id, status, [])}
    wf_run["data"]["taskRuns"].append({"id": "xyz", "invocationId": "abc"})
    return wf_run


def make_list_wf_run_response(
    ids: List[WorkflowRunID],
    workflow_def_ids: List[WorkflowDefID],
):
    """
    Based on:
        https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/resources/workflow-runs.yaml#L1
    """
    # Assume empty task runs for now
    return {
        "data": [
            _list_wf_run_resp(id_, wf_def_id)
            for id_, wf_def_id, in zip(ids, workflow_def_ids)
        ]
    }


def make_list_wf_run_paginated_response(
    ids: List[WorkflowRunID],
    workflow_def_ids: List[WorkflowDefID],
):
    """
    Based on:
        https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/resources/workflow-runs.yaml#L1
    """
    # Assume empty task runs for now
    return {
        "data": [
            _list_wf_run_resp(id_, wf_def_id)
            for id_, wf_def_id in zip(ids, workflow_def_ids)
        ],
        "meta": {
            "nextPageToken": "1989-12-13T00:00:00.000000Z,"
            "00000000-0000-0000-0000-0000000000000",
        },
    }


def make_get_wf_run_artifacts_response():
    """
    Based on:
        https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/resources/artifacts.yaml#L15
    """
    return {
        "data": {
            "task-1": ["artifact-1"],
            "task-2": ["artifact-2", "artifact-3"],
            "task-3": ["artifact-4"],
        }
    }


def make_get_wf_run_artifact_response(result_obj: Any):
    """
    Based on:
        https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/resources/artifact.yaml#L13
    """

    return result_from_artifact(result_obj, ArtifactFormat.AUTO).dict()


def make_get_wf_run_results_response():
    """
    Based on:
        https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/resources/run-results.yaml#L15
    """
    return {
        "data": [
            "80ba3786-70c0-11ed-a1eb-0242ac120002",
            "80ba3a88-70c0-11ed-a1eb-0242ac120002",
            "80ba3c7c-70c0-11ed-a1eb-0242ac120002",
        ]
    }


def make_get_wf_run_result_response(result_list: List[Any]):
    """
    Based on:
        https://github.com/zapatacomputing/workflow-driver/blob/main/openapi/src/resources/run-result.yaml#L13
    """

    return ComputeEngineWorkflowResult(
        results=[
            result_from_artifact(result_obj, ArtifactFormat.AUTO).dict()
            for result_obj in result_list
        ]
    ).json()


def make_get_wf_run_result_legacy_response(result_obj: Any):
    """
    Based on:
        https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/resources/run-result.yaml#L13
    """

    return result_from_artifact(result_obj, ArtifactFormat.AUTO).dict()


def make_get_wf_run_logs_response():
    """
    Based on:
        https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/resources/workflow-run-logs.yaml#L13
    """

    return "bytes"


def make_get_wf_run_system_logs_response():
    return "bytes"


def make_get_wf_run_system_logs_response_with_content():
    """
    As make_get_wf_run_system_logs_response(), but returns bytes that can be decoded.
    """
    return b'\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec]\xebn\xe46\x96\xce\xefy\x8a\xb3\x02\x16\xe5\xce\x96T\xba\xd4\x1d\xebA\x0c\xdb\x991&\xe3\x18n\'\xc1\xac\xdb\xd0\xb0\xa4SU\x8c%R!)\xbb+A\x03\x8b}\x86Y\xeck\xec;\xec\x9b\xcc\x93,H\xa9.\xbe\xb4\x93N\xcb\xb2l\x97~\xb4\xabU\x14\x8b\xe7\xe3w\x0e/\xe7\x1cJ*\xcc\xec\x84\xcf\xe4\x17\x8fw\xb9\xae\xeb\xf6]\xd7\xfcuo\xff\xf5\x82\x81\xd7\xeb\x7f\xe1u\xbbA\xbf\xeb\xban\xd0\xfd\xc2\xf5\xfc\x817\xf8\x02\xdcGl\xd3\xea\xca\xa5"\xe2\x0b\xd7\x15\x9c\xab\x87\xca\xfd\xda\xf7\xb7\x85{&\xd7\xf9\xb9\xd7\x1f\xf6\xfa\xa3\xde\xc0\xf3\xda\xbfX\x8a\xcc\xac\xb1u\xcd\xc5\xe54\xe1\xd7\x8e&\x86#\x17Ra\xea\xcc1Ix\xc8\xc5O9J%Hx=\xb5\xffCP\xfe\x8d-\\\xd7\xb5\xdaV\xc2g\xd6\xf8\x17\x8b\x91\x14u\x15S[\xe4\xcc\x1e\xf9\x04G\x83\t\xda\xfd\xa97\xb2\xbbA\x1c\xd9\xa3\xc8\xf7l\x7f\xe4\xf5\x82h\xd2\xebM\x87\x9e\xd56\x0f\xc9\x8cD\xe6Ii\xbbv@&\xc8~$)e\xb6\x8fi\x9e\xa6(\x16v\xd7\xfd\x99dD\x91\x88\xa7Y\xae(\x9b\xd9>F<\xb5\xda\x16^!S\xd6\xd8\xda;88<\xb0\xdaV6\'R\xd7u\x82,\xa6lf}h[\x92\xe7"\xc2P-2\xfd\xc5_\x86o\xc3\xc3\xef\x0f\x8f\xcf\xac\x0f\x17\x17\x7fxY |wr\xb0wv/\x0cm+\xe3\xf1>g1U\x943i\x8d\xcf\x7f\xb1J@Nx\xfc6\x9ac\x9c\'\x18[mK*\xa2ri\x8d\xad\xafI"\xd1j[\x02\x89\xe4L\xd7\xcedQ\x8eL\x12\xfdE\x8aR\x92\x99\xae\xc2\xedt\x81\xf1\x18%\x10\x81@\xae\x085e\xc6\xd0\x85\x8c\xc70\'\x12r6\xe19\x8b\x81\xa6)\xc6\x94(\x84\x13\x14\x92J\x85L}\xcf\x93<\xc5\xfd\x84\xd0T:\x90\t\xc44\xd3\xcd\x1c\xc3\x03\x15\x9f\xac\x8a\x01\x95\xc0\xb8\x829&\xd94O`\xca\x05\x94-\xa5l\xe6X\x1f.~;\tz[\x12TN\x02\x0f\x8e\x98\xcc\xa7S\x1aQd\n\xa2,oC`\x8a\xee\xc87\x10\xd3\x98\xb5\x14\xa4DEs8\xe1qK\x9a\xaf\x80L\xa7\x94Q\xb5\xe8HL0R\\\xfcFfxp\xcc7J\xc2\x15\x8d\x14M%L\r\xfd47(\x8bxJ\xd9LsS\xb7\xe4Q\x984\x1an\x99t\x83Ig"\xc7-\x80k\x00#\xce\x14\xa1\x0c\xc5\x11\x9br\x03`\xd9\xd4i\x92#S\xf6\x84\xaa\r\xf8~1\x9f\xf4\xd7?\x10\xaa\x8a\x1aV:y\xc2\xe3#F\x15%\t\xfd\xd9\x8cy\x1f\xda\xab\xda\x12\xca.Q\xc4v&\xf8\xfbE\x15\x15.;C\xe3\xf9\xfb\xeb\xbbx\x80A\xab\xa2\xbfb\x8a\xf6\x97\x08\xcac\xaen>\xb4\xb6J+\x98%\\S5/\x94?KP!\x145\x8f\xe1|\x89\x91\xb67\x17\x96\x96\xb5l\xc9)\x92x\xf1\xdb\xdb\xb0,\xfe\xf1_\xcf\x99\xd0e\xee\xfe\xb4\xe9\x1e\xd8\xc4\x16\xd6<\xb8\xd1\xa6\xf5/6\xb1u\x15i\xff\xd0\xedn\xb5\x7f\xab\xfdw\x08\xb4U\xcd\xa7W\xcd\x9e\xefx\xa3\x9eW\xc5\xf0l\xf9\xae\x1f\xd8n\xdfv}p\x87\xe3\x9e;\x0e\xfc\xf6\xc0\xf5\xde\xa9\x1f\xf6N\x8f\x8f\x8e\xff\x04\x12\xc5\x15\x8dP:\xd9b\xec\r\x86.\xd86\x94\xdf\x8d\xe1l\x8e\xc0\'?b\xa4@*.PO\xdfr\xa9gv\x1d\x95f@\x99THb\xe0S\xe8\xc4x\xd5\x91\xf3\x14&\x18\x91\\\xe2\xfa\x86^\x9bp\x96,\xa0?\xf0\xdc\xe1\xb0\xdf\x85\xc9B\xe9Y\xe5rF\xe9\xc0\xd9\x9c\xea^H\x12\x98\x13\x91B\x86b\xcaEJX\x84\xff\x02\x7f\xe39\xa4d\x01\x13\x04]\x18\x14\x87\xa9@\x84<\x03cB`\xb2\x80\x18\x13\xd4:\x01S\x9a\xa0\x04\xcaV\xbf\xee\xc0\xd1\x14\x16<7sX\xca$\xd5\xf3^8\xe0\xd1%\nXQ\xa0m\x8aD\x84\xe9\xc1K\x13h\xa3\xf9\x92\xfel~##\xd2\x08\xde\xb2m9Om}{\xd7u\xfa\xeel\xd2\xd2mj\xc5E\x9d"g-\xd8\xe1\x02H\x1c\x03U\xfa+5G};\xe4f\x06,!\xa1R\xe96\x128%\x0b\x88\x92\\\xaa\xa21S:{\xe3\xc0_\xc9%\x82\xcc\x85\x11U\xa2\x02\xa5\xd1Q\x1cR\xdd\x01jN\x18\x04\xee\xbfj\xccW\x08\xc2\xe9\xde_\x1d\xeb6\xbdN\xf7\xfe\x16\xfe\xf9p\xef <\xfe\xf6\xe0p\xfd-\x8d?\xd1^\x7f\xb8h\xdf\xa1f\x15K\xf9\xbb\xdc\xf4G\xedQ7x\xa7\x8e\x8e\xbf\xfe\x16r\xad\xa8aB\'\x9a\x99\xdd\xbe\xa7\x89\xf9\x9d\xbegTTB\xc4\x13\xbdl)\x17\x15\xc84\x10q\xc1\x86)\xc9\x13e\xd4\x9a\xe7\nr\xb9\x84W\xa4\xc4\x94_r\xb4@\x16EJ\x19It-1*\x8c\x14\xc6\x1a\xee\t\x02\xe3\xcc\xa6L\xa1 \x91\xa2W\x9a\xa8\x1cb*\x0b\x1e\xce\xa9l\x9b^\xfe\xbbm\x977m\xd3f\xdb\xb4\xef\xef\xcb\xae\x8fx\x9a\x12\x16\xeb\x9e\xd3ZD\x84\x92\xc5\xfd\xa2\xe3\xdb\xc0\rk\xcc\xbd)O\x12~\xadiV>5\x86\xbf\x0b\xb2\x80{\xeb\x9f\xe0T3\xc2T\xa9\x1f\xd9\xa8\xd4\x81\xb7\x880W*\x93\xe3N\'\xe6\x91t\x04Y8\x94w\x90uR\xa2\x8bt\xca\xa2\x9d\x8d:\x9d\xb9J\x8b5\x99\xe1Z\x8c\x8a\xd0D\xbe\x18fuKf\xc9H\xd0L\x19\x8b7\xf0\x8c\xc1{\x97\xbb\xae79\x0f\x06\xe97<"I\xb1>>:Y\xde\x1e\xa5\xe3e\x11/\xf5\\\xc7w]\xc7\x0bz\x8e\xe7\xbb\xe5m\xdfOkE\xc9\x7f\xac\xb1a8\x08\xde\xa9\xb7\xdf\xed\xef\xdf@\xa9;\xd8D\xc9O\xed{\xae5X/\x1a\x89\xe1M$\xb4\t\x179S4-5\x11c\xe7\x95 1z\xa5\x9c\xb8cCz\xde&\x12\xfd\xf4\x18\xdfkK\x8f\x99|"\xf9\x83\x9a\xe5\xf7\xb5\xfcg\\\x0f\xb2L\xcf\x15\xcd\xc8G%l*\xc7T\xf0\x14\x08\xe3j\x8e\xc2\xd8\xd76\x94+\x9c\x17\x0bKo\x83\x16^\n\xa0Grc#\xc0\xb6I\x1c\x0b\x94r\xb7us8\x19\xf7\x83\xc1\xa8\xf5D\x83J\xcd\xf8\x0c\x8c\xda\xec%\n\x05#z~\x95,\xdaPL\xcb6gB\'\x0b5\xe7\x0c"\x1e\xe3\xb8V8\xaa\xd8 \xf9\x08\x1c\xf7\xcdD\x06\xc1\xa6\x15\xe9\xa54\xcd\xb8Pk\x0b\xb2$E?\xd5Dz\xd1H\x98\xd9\x86 \x8b5\x18\xce}8PF\xd5N\xa9H\xeb\xa2\xbb\xf7\x15]\xde\x0b\xd2\x16\xc9\x15o\xddW\xe6\xcdK\xc6t\xe4\x966Zb\xa1`\xc5\xee\x84^F\xdeX\x8c\xe4f\x13\xe5\xe5\xc2`l\x0e\xac\xadri\x93U.\xd7FwM\x89Z\xa1\xa8\xc23\xfa)PtKF\xa4\x9cQ\xc5\x05\xe8Ej\x8c\x93|\xa6\xc7\xed6\\Q\xbc6\xdc\x88\x89\x9cO8\x111\x10\x05/\x1a\x91\xde-r\xdc\x1a\x9b\x87~\xbf\xf7\xcaX2t7\xe7\xb6\xdd\xf4h\xba\x9c\xe4Q\xce`Jh"\xdb\x10\xcd1\xba\x84\x05\xcf\x05L\xa9\xc0k\x92$ Q)\xcaf\xd2\xb0\x8a\xa1\xd2\x8d-\xf7\xb8rava\x96&\xdd\xef\xd6\x0b`\xbff\x00G\xa5\x9a\x95\xfbL\xaa0\xbf\x1bS\xe3\xfa\'\xc25Cpc\x8fe=\x11\xe6\xd9\x13\xcds+\x11_K9\x16\x9c\xab\xf1~\xa9\x10l\xa6\x17>\xc7{go\xcd\xa6:\nm/\x19Qr\xdc\xe9\xe8?\x8e\xf9G^E\xcer\x97.\xe1\x11I\xc6]\xdf\xf7\x1d\xf8\x81&\td\xf9$\xa1rnv~s\xb3\xef.\xe1\x98(\xf9=\x11r\xe7z\x1a\x16#U\x18\xcd\t\x9b\xa1\x0c\xcb2\xbb\xad\x95\x1c\xc6I$[m\xb8\x9e\x86"g\xa1@\x99\'J\x86\x91@\xa20\xbe\xe7\t\x913\xa7(\xe5\x94\x85\x8a\xa7\x89PtJ"\xf5\xc0\xa3\xcb"7\x1f\\\xf2\x9cr\xf6\x91\x9f[iB\xfc0\xd6\xf7\xd4\xa7\x04\x92t]\x9d\xe1\xc1\xba:\xbb\xf8\xfe\xeesQ.\x15OQ\xec\xb6\xae\xa7v,\xe8\x15\n[\x90\xc5W\x1f\xab\'\xe2L\xe6)\x8a\xa2&\xe4\xa8\x7f\x99\xb2\xd9R \xb9{\xde\xba\xc9\x1dA\x16\xbf"\xcc\xc5\x9bz7R\x07\x8f\xa3\xe4\xdd\xf6\xc0\x1f\x95J\xae+Fa<GA\xdfL\'n\xea\x02\xbe\xa7\xd2|\xdett\x10\x05\xe5\x9c}\x0c\xf7,~\x1d\xe7\xa5\xc0\x14\xf4\xef\xc2\xd4\xebn\xc2T8\x1a6\xc0q\xe0\xfb{g]+\xdb\xb9\xden\xbbgn\x02wW55[\xd6\xc7\x03\xb37\xdc\x00SW\x1c\x92(Bi\x06\x98\xa0\xd7\xd7\xa0n\xba\xc0W\xc5 %\x8c\xccP\xd4M\xabGr\xde\xf6\xdb\x03w\x89\x04\xc9\xa8\x96\xdew\xcd\xc6\xc1\x0fK\x81\x7f\xe4\x13(\r\xb2\x03\xe74\xde}g=\xf8k\xef\xac\x8bg\x08\xcd\x92\xe0\xe9z\xdbug\t\xc1_M\x97\xa7\xc8\xd4^\xa4\x176\x19\x8dw}\xaf\xf7\xa6,\xea\xa6p\x1f\xb0\xa3\xc1\xe86\xc5\xf0=F\xb9\xe2Fu\x87\xfd;(kp\x1fl\xed\xc5\xca%\xf0\x02\x00\x0e\xd2\x1dA\x16\t\xaa\r\x1c\x0f\xdd\xfe\x1a\xc2\x81\xe3\x06\xdeh0\xea\x0f\x03\xd0\x97\xd7ua\xca\xc5e\x98qI\xdf;Q4\x1e\xf4/`}}k\xb6\x82\xd5\\ \x89\x8b \xd3(\x17\x02\x99J\x16\x10\x91$\xd1jL\x99\xe20;=\xd9o\x83\xbc\xa4Yf\x9c\xfc\\\\\xee\xbc\x819aq\x82B\xd6\n\xed\xa8\xda\xa9\xe3\x8aN\xa79[*m\x11\x8e2K\xf8\x84$pt\x00\x0f\xd6Y/\xb1*\x91\xfe\xf7\x10\xab\xdf\x1d\xb8\x9e\xebw\x07[bU\x0b\xed\xd0\xe9\x0e\xfc`0p\x83\xe1K\x85\xf6i\x90\xedzN\xe0\xf5\xdc\xa17\xe8\xba[d+Fv\xd4u\xbda0\xeam\x91\xad\x16Y\xdf\x19\xf8\xa3\xe1\xc8\xf7\x06\xa3\x17\x8bl%\xf1E\x9f\x0em\xcf\xe9\x8e\x02\xdf\xd5\xbc\xddB[-\xb4}\xc7\xf3\xdc\xd1\xb0\xdf\xf7\xb7\xac\xad\x1c\xda\xa1\x1f\xf8\xddA\xbf\xfbr\xa1}\x9c`\xa1\xee\xa8\x1d\xf8\xc1;uxz\xfa\xed\xe9\xc6\x0eP02\xfe\x80\xefX!k\x0c(\x04\x17\xb0#\xf3,\x13(\xcb`\xf4\x96\x16\xf8\xe8O\xc7\xdf\x9e\x1e\x86\xdf\x1d\xffy\xef\xf8\xe0\x9b\xc3\x83\xd0\xd4\xf5v\xd7k\xbd\x19oD\x1b\t\xb2\x18\x8f?\xb2\xf4u\x8a\x15,\x86K\xd1v\xde\xac\xf7\x88`\xa7\\\x18\xb7\x81f\xbb7\xf7\x93\xda 0\x13\xbb\xff.\xc8\xc2Y\xc1r{\xeb\xe5c\xeb\xed2b\x9c(p\xdf\x0f\xa6n\xd7\xeb\x0e\x89\x1bu\xdd?\xd6\xeaa\xaf\xa6c5\x00\xf8>\xc2"v\xdb9-\\6\x87\xec\xea-\xaa<;\xd4\x9d7\x86\xaf\tM\x8a\xbd<\x89\n\xf2l\x15\xf4\x84\xec\x8a\n\xce44\xb5\xae\xd4\xaa\x91}\xcb\xb1_\xc5\xb9\x92\x90)\x80\xafi\x82\xf0\xce\xea\xe4Rt\x8cS\xa8\x93\xd0I\'3\x91O\x813\xeaH\xaa\xd0\xceHtIf(;\x82,:\xab\xed\xe1N\xca\xe3<\xd1w\x0b\xce\x85\xc8\xae6?\x87d\xa6\xd9\x97-\xdeYmH(C\x08z\xba7\x18\x94\x9e\x9dp\xb3\xb0\xb6>\xa1@%j\r0\xaa\nF\x80MY"\xce\x14\xbeW\xb0\x0b\xe4\x9aP\x05D.XD\xb9\xa3\xff\x13N\xb9\xd8y\x8e"\xfe\x1aSJ!;\x8a\xc8K\xb9\xd9\xeb\xdd\xc1\xc8\xf4\xfaR\xfaZ\x85\xaf$\xca\xc7\xf4/\xaa\\0\x98\xe6\xaatZ\xee\xd4\xab\xef\x15\tR\xaf\xbe{n\xa1\xefR\x0fY\x9b\xea\xfe\x1c\xa1\x83R\x9bK\xe35\xe5"\xcc\x92|FYH\xa7!C\x8c1\xaeW\xb1+\x91K\x8f\x81a&\xe8\x15Q\xe8l\xf4\x90\x93+\x9aH\xe7m>\xc9\x04\xd7\x03\xe2>I\x12\x8cO\x8a\xff\x94\xd3\x0f\xb3y\x9c\xc6\xe7\xa3\x0b\x13\x91\xb3\xdcB\xbe\x19F\xfb\x14\xc9<\xd5`\xb3_&P\xb5\xce[\x1d\x95fF\x1d$JI9\x0b\xd7\xf3\xee\xd0\x1d\xda=\xd7\xf6G\xe1\xa8\xdb\x1dt\x83\xd0sWj!\xb0\x10Jv2\x9auz8\x0c\x88\x1f\x91x\x10\xf4\xb1?\xe8\xbb\xbd8vI\xd7\x9d\x04\xdd\xb8\xef\x07\xa3\xde \x1aLG\xd3a\xe7\x8a\n\x95\x93D+\xd8\x84\xb2R=[mh\xd9\xa9\xfe7\xa3\x99\xfeC\x99T$I\xcc\xfdU"XF3\xfb\n\x85n\xa3m\xc2\xa3\x8a\xaf\x19\xb7#\x12\xcd\xd1\x8e\xa90w\xcc\xbf\xf5J%\xf0\xa7\x9c\n3\x95\x92\x8ez\xafZ\x17\xad\xd2\xacbl2\xde~Fa\\\xf7j\x19#\xea\xd5K\x9aJ"\xdc\xbe!RA\xcf5\x16\xd0D\xb9J\x15\xf3\\\xd5\x1aA^\x8d$\xda\xe4\xed\x97\xb9\x8el\x063\xaa\xfeM\xca\xf9\xb8\xd3\xf9\xf2\xcb/\xbf\xfcjF\xd5<\x9f8\x11O;\xb7\xb2\xe5;\xab\x8a\xedU\x98\x8b\x8c/\x9d\x19U_\xa5\x842\xd81)\x19\xb6\x80\xa7\xe5\x1f\xec\x98Q\xca{S\xefH^Y\xdf\x00\xec\'\x9c\xe9\xae\xf9\xdcn\x81\x1d\xc5A\xe0\x15\xd5\x9d\x00\xba\x8f\xde\xe85\xa5\xe9\x1emP\x04\xfedOr\x9a\xc46\r\xb9\x1c-\x12R+b\x95\x84\xcd\x15\x88\x9d\xe6\x8cmd\xb9jRC\x94p\x86`\xdbS\x9a(\x14\xbb\x93\x84O\xc6\xac\xb8\xf5SNQA\xebs\xf1m\xbdD(\xff\xcc\xa5\x82K\\\xc0\x15\n:\xa5\x11YE\xe6\xd6\x1cvP\xa5PS\xa2H2\x86}\x9e\'\xb19/J \x89\x8b\x142\x81)W\x08\x023.\xa9\xe2bQ\xaf\x90\x95D8\x15B\x9e$\xe6\xa4\x81t\x95\xef\xbf\xe09\xcc\xc9\x15\x96i\xe3B\x98\x1d\x0e\xb3\x0f\x02\x82\xce\xe6\xaa\xde\x8d\xd1\nE-\xf2\xdf7{\xad\x88\r\xacy:ZI`L!\x11\x16So\xb9\x9a\x98\xdbz\xc6\x84\xb1\xad\xa7\xde\xb6\xf9\xb6V\xd1*\xf1\x18B\xad\xe9\x1dU\xb5Y_\xff\xf7?M\x18C \xa6\xa5\xb9\xca\x19\xc8\xdch\xee4O\x92\x9amT\x85\xb8\xfe\xf3\x1f\xffU,\x05L\xfa%x\xfe\xf0\xd9J\xf2\xdf\xff\xfb\xcf\x7f\xfc\xe7\x1f\xcd\xc1\x18d\xc2\xaf\xd0\x9cs\xc1s\x95\xe55\xef\xcd??U\xad\xc4\x9bPt\x03\xe3\n\xc7\xc5\x81?\x85\xe7\x8b\x0b:3Q\xf7\xb2L\x11\xdf\xb0\xa9m3pP\t\t\xbd\xc4daT\x8b@&\xf8$\xc1\xb4\xd8\xe4\xc8hVg\xefU\x86D\xb3\xc6\x0f\xdf\xad\xc4\xc1\xbc\xb5\xc4\x8f\x85\xea\x93\xda\xe1*\xe5h\x88\x15\xf6\xdd\xca4\xf9\xb9[\xb4j\x908\x9b/;t\xe5-\x87kR\x9ct\x15S\xb3\x92)\xce\xdc*\x13\xce\xd7\x1b\xd3\xab\xf2u\xee\xcdU$\xf5\xd6C\xfe\xab8\xd7\xe4\xf7\x8c8+C\x8d:\xd3\\\xe5\x02e\'\x9c\x10\x897\\\xa0A\xe1\x02-<\x87\xcf\x11\x85\x95\x03Tb2u\xc2p\x86*|\x02?h\xa3z5\x18y\x85{s\x03\x8d\xe7\x88\x05\x80 Tb\xd9\xb5+\xabX\xab(O\xe6\xde^\xfe\\\xe7nz\xdf\xaa\xa3}\xb7P\xdf\xdb\xd6\xf49"\xb4\xf4b\xaf2\xccD\xce\xc2\x9c)\x9a\x84\xcb\xd3\xb3w~\xe4\x93\x90\xc6m(\xe3XL*\xb29\x85\xb5^Uo\x10\'6\xf2\xf1V\xac\xf0JV\xdc\x05\xb0V\x94*s\'\xdd\x8cU\x9a\x115\xc7Z#\x95*\x13\xe5\xb1:<\xe8\xf5\x0b{_D\xd0\x86\xe6\xd8\xe6P\x11y\xf9\x1cQZZ}\x14\xf5\xae\xf7+i\xfe\x8dy\xe9F\x94\xecrJzh\xba\x8frV\x06\xaa,\xef\xff\x86\xc4\xd92\x90%\xceE\xb1F(+\xaaweT\x89G\xab\xe2L\xe5\xee\xa8\x1dx\xfef`\xf9\x9dT\xe5\xc05\xb9\xcagD^.C8\xce\xbf\xde;\xfa\xe6\xf0\xe0\x02\xe2\xdc\x9c+M\xa0\x90\xa1X\xb2:\xef\xd4\xf9\x83\xc2|E\xd9\x15/\\\x8b\xb6kk]\xb3My{U\xfeb\xdb1\xa3v\xe0\xbb\x0fwLqR\xe6*\xeb\xb7\xf5\xf0\x89!k%0}\xd6\xb4(\xf3Ft\xc3\x99 \x11NHt\t;)\x97\n\x04F\xe6\x15H$I !R\xbd\xa9wW\xa1\x12\x9f\xe9\xe7!\xf2\xda\xa3\xc9\x1b\xd2\t\xcd\x8dEo\x08@\xcf1\x92\xddw\x1bpx\xc9\xd3\xc7\xc17\x04\x86\xd7\x17E\xdf\x10\xe0\x1b\x16\x83\xef\xbb\x8f\x93/\xff\xe8t\\F\xfc\xdf`a\x81\xe4\x8d\x8d\xaf\x9eo\xa8\xf7\x00\xdc\xaf\x0fm0o\xe6\t\x8bw\t-\x87\xd5\x12\xbb\x02\xa8\x9d\\\xd0\xf6\xe6(\xbc\xb1\x95\x96\xf0\xd9\x0c\xc5n\xf1\xa7^\xd3\xd9\x08\xf4\xaa\xe2*\xcdn\x8e\xcc\xc1\x06Q\xebD\xf5q\xf2\xe3\x7f\xef\xb0\\\x90\xb1\xee-\xa9F`\xf0H\xc4\xba\xb5\xc8\xd0&pN\xe4\xfc\xd5\xc1\xbb\x1cyOhV\xe6\x80\xd5\xbcvh\x04\n\x8fC\xb2\xa0_:\x12\xeb=\x8e\xd9\xaf\xe4\xbd\xe8\x951\xabp?\x96ImaF\xb3p\td\xbd<k\x04(\x8fD\xb4`P\x10\xed>\x94_\x1f\xc8\xab\xd5\xc4\x1c\xa3\xcb\xb0\x88\x05\x0b\xa34\xde\xd1\xb0,!\x8a\xd2\xf8\xd6\xac\xad\r\xd1u\xbc\x1b]\xc7m@v\xb5\xab\x0b#\xbb\xaau.\xd7\x0c\xfc*"i\x91i|\xc3\xb3Z\xd8\xc3\xdb\xfdR+\xc2U\x86i}\xce\xc4\xce8\xe9\x1eJ\xc3\xae\xd7:6\x00\x96\x17\x99\xb2\xde\x08d\xb7\t\xef\xaf)\xe1\xdd\xf7*\t \xfb<\xca5 ]\xbe\x118l\x93\xed_r\xcf\xbe\x92T}\xdf\xab$f\xaf\n\xbc_w\xa2\x7f\x83:\xa2)\xc7\x044\x08\x92\xa6\x1e2\xe0{\x95\x04\xe7}\x1eD\xafM\xde\xe7p$C\x83\x80j\xc4\x81\x0e\r\xc2\xa3a\xe9\xbc^\x03"\xf3\xea\xcdPo\x86\xc4\xdb\x04\xe8\xa6\xf6\xca\xd3&P7\x08\x87\xa6$`{\x8d\x08B|}\x12\xbf\x84\x94\xf5\xa6 \xd9\xb4Q\xbf\x01\xc1\x81\xb5\xca\xdb\x88P\xaa\xed\x88\xdf\xc4>y\xda\xf1\xbe\x01N\xa4F\r\xf6\r\xc0\xe3\x95\x89\xfb\x12\x86\xf9\x06\xc0X\xab\xb8\x95D\x93\x98\xf4\xc3[o\x17\xd5#\xc22+>\x86\x9cm\x8e\x0e\xcfO\xc2c\xce\xf0l\x91\xe1\x18\xf4\xa7\xe7\xd7\xfe\xf5\xeb_\xf7I>\x9bk5cDI\xc7\xe8\xa8t\xceh\x8a<W&P\xc2)\xb4W+\xf0\xfb\xacxa8Qf\xe3\rY\xbc<JI\x11yY\xaf^V\x02\xc3\x0f{\xa7\xc7G\xc7\x7f*\x908\xa02Z\xbd\x13\xdd\xd8\xa6\xe3\xbd\xb3\xb7\xf5JU\x89\xb9\xb9!\x95\x96\x01J\xb9(g\xba\x1f\xa3\x84\xcb\xc7\xf5\xb8\\\xfc\xe1|-Z\x15\x8e\xd7_,FR\xfc\xc4v\xb4\xcdC2#\x91yR\xda\xae\x1d\x90\t\xb2\x1fIJ\x99\xedc\x9a\xa7)\x8a\x85\xdduoM\x7fm\x1f#\x9eZm\x0b\xaf\x90)kl}wr\xb0wvx`\xb5\xadlN\xa4\xc1\xaap*Zm+\xe2L\x11\xcaP\x1c\xb1)\xb7\xc6\xe7\xab\xa6N\x93\x1c\x99\xb2\'\xd4\x1c\x05d\xa2:\xb4 \xfa\xd3f\r\x1f>\xb4W\x8f$\x94]\xa2\x88\xedL\xf0\xf7\x8b\xdf\xfc\xd4j\x8a^\x06\r\xdfy\xe8\x0cEj\xc6\xdc\xd8j[)JIf\xfa\xf6\xe1zn\xeaZ\x1f>\\\xb4\xad\x8c\xc7\xfb\x9c\xc5\xd4\x1c\xa1`d)\xa9\xb1z\xaf}\x91\xe6S\xfe\x82u&r\xb4tK\x96\x0cB\x12o\xb6\xdb\xfa\x9a$R\x9bG\x81Drf^\xa4Q\xa2%\x8f\xb9Z\x16_7i\x05f\xf9\x12\xba\x9c\x99\xa35\xca\xa0\x981\x9c\xdf@\x086%\xbf\xd8l\xc8\xfag\x1a\xd3\xa4\x13\x1e\xbf\x8d\xe6\x18\xe7\xc9}\x18^|\xb8\xad\x8d\x7f\x19\xbe\r\x0f\xbf?<>\xdb\xea\xd3V\x9f\x1e\x8d\xbc\x8d\xd0\xa0G\xd5\x99\x81;\xe8\xfaU\xec\x08<\xb1\xce\xec\x1d\x1cl5f\xab1uh\x8c7p+9Qp;\xcalu\xe6\x15\xe9\x8c\xef\xbeD\x9dy\x9bG\xd12\xbf\xff\xf7j\xcdo\xa3\xf2\xa7h\xd4\xa7\xd6\xf8\xc4\xda\xb6A\xe3\x13\xfd|\xb9\x0f\xf6iZ\xf8\xb1\'?E\x89>V\xc7V\x07\xb6:\xb0\xd5\x81\xad\x0e,u\xe0\xe0\xf0\x9b\xc3\xad\x0elu\xe0\xd3t\xe0\x8b\xed\xb5\xbd\xb6\xd7\xf6\xda^\r\xb9\xfe?\x00\x00\xff\xff\xf7\x04\x85Q\x00\xc6\x00\x00'  # noqa: E501


def make_get_wf_run_logs_response_with_content():
    """
    As make_get_wf_run_logs_response(), but returns bytes that can be decoded.
    """
    return b"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\\mo\xdb\xba\x15\xce\xe7\xfd\n\xc2_\xeav\xb6D\xea\xd52\x96a\x1d\x9a\xde\x15\xb8\xcb\x1d\xb2\x14\xc3\x10\x05\x02E\x1d\xd9jd\xd2#\xa9\xb8\xde\xc5\xfd\xef\x83,\xdbql9\xb7i\xf3F/\xfcbX\x92\xa5\xf3<|\xce!yxd\xa5a\xda/\xc5H\x1d=^\xc3\x18\xe3\x00\xe3\xc5'\xde\xf9\xf4<'\xf4\x8f\x88\xe7a\x8f`'\x08\xdc#L\x9c\xd0\xc1G\x08?\xa2M\xebV)M\xe5\x11\xc6R\x08}\xd7u\xbfw~\x1b\x9c!\xed\xe2\x82\x04\xe1`\x80=\x0f;\x16&\xfe  \xbd_;\x9a\x8e:\xc3\xceL\xc8\xab\xbc\x143\xab\xd6\x87%\xe9\xdc\x9a\xe5I\x06y\xffc\xce\xcf\xff\xdb\x97\x18\xe3N\xaf#\xe9<\xc9\x8b\x128\x9d@g\xd8\xb1\xf5djK:\xb7\x15(U\x08\x9e\x94T\x83\xd2v}\x0f\xbb\xbe#\xc8\xbeO\xc1\xa74\x8c|\x878\x0eIS\xea\x844%\x830\xcf\x06\x98\xd0\x80:\x91\x17B\x1a\xa5)\xcbR\x96E\x11\xf5R?\xc4N\xd0\xc7\xa4a\xb7\xef\xe0\xd0\x02);\xbdN)jS\x87\x94i!\x93\xda\x86\xe1\xdf)\xa7#\x90\x9d\xdf.{\xdb\xe0\"S\xb0\x89J\xdf\x1b\xdb\x13\x80\xa3\x01&\x91Kh\xca2\xec\x11\x82S\x97\x84\x01\xce\x1d\xcf\x07\x8f\x05$#,\xcd0\xce\xfd\xc8ss\x9af>\x00\xa3$\x8b`\x03\x9c\xeb\xdf\xee8M\xd5U\x83\x8dI\xa0\x1a\x92\xda\xac\x15\x80\xc3\xc1\xe9`\xc7\xedc\xb7O<D\xbc\xa1\xeb\x0c\xfd\xb0\xe7\xfb^\xac?\x9d~\xfc\x05\xd1iaM\xe7C\x07\xbb\xa8\xdfG\xffZ\xc2B_D\x8a\x1aV2\x0b]\x14\xd9q\xdc\x99\xe5K\x8c\x96\xcb\xfc<r\x07q\xe7\xd2j\xa1\xc9H\x926\xc4\xb0\x96@\xb28\x06_\x81U\xb5\x17H\x98\x08\r\x87\x02\xb8M\x15\x91\xeb.Uq\x0by\xad\x8fpP\xcb\xe3\x9c\xaa+\xa44\xd5\x95B\x17g\x9fOO?\x9d\xfet\x19\xeb\x8b\x1di\xfc\xa5\xe0\xd7\x82Q]\x08\xde\xc7\xfd\xfan\xfdL\xf4\xf5\xb8\xe0\xa3\xcb6\x06\xf1\x13\x84\xfe\x87\xe7\xf0\xd7\xb8\xa3\x8b\t(M'\xd3\xb83D\xf1\x06\xab\xe7+V\xad\xc8\xf5}\xd7\xff#\xc6C\x8c\xe3N\x0f\xc5\x9d\x12\xae\xa1l~prv\xf6\xcbYst\x05\xa79\x91dtT\x13O\"\xbf9=\x01\xa5\xe8hy\xf6\\R\x06)eW\xa8;\x11J#\t\x0c\xb8F\x8c\x96%*\xa9\xd2o\x87q\xcc\x11\xfaX\x94\x80\xe28\xee\xd8c1\x01[\xc8\xffT\xa0\xb4\xa4\xf65\xf0k\xbb,R{:\xd7c\xc1]+\xb2U\xa1\xa1?\xa5\xec\x8a\x8e@m\\\xaa\xb2+\xbb\x8e\x8c\xf6\xd2\xa2\xfav=T\x16\x1c\x10\x89\x9c\x1e*8Z\x04\xce\xc6=\x16\x8fEH\x82\xae$G3I\xa7S\xc8\xba\xef\n\xceA&T\x8eT\x0f\xbd[~\xbb\x9a\xd5\xdf\xdf>\x89\xa1^\xd8\x18\x9a\xd4\x0c%\xc9m+\x15\x94\xb9\x95\xe4\xbc\xfb\xae\xe2\xf5}![[\xba>\xd0n\xecg\x05R\xd9)\xf0/tR\xf0I5\x99\x80\x9c\xdb\x1f\x04\xab&\xc0\xb5\xb2\xff!\xc5\x17`z\xc3\xca\xfeJ\xde\xfd\xda\\\xcb\xb2\x15\x93T\xb3\xf1\xeas\xcb\xee\x86\xdfL$\x0b\xd7\x89c~\xf2\x95\xc1\xb4v\xab!\xfakI\xc7q\xcc\x1bu\xcc\xf2DV<)\xb2F\x1f-\xb1\xba\xbej\xe1\xd6\x9b\xd7\xedw\xd3\xb8\xf3[\xab\xa3\xba&:\xea\xef\xbb\xcb\xe1`]\xe9\xf3A]\xe9\x0e\x8f?$\xe6\xee\x15\xb8\x0e\t\xf8cJf+\xf6\x1e\x12m\xdf3\x84\xb4\xe2\xf7\xcc\xc4\xbf\x92\xcd\xe3\x8c\x83{F\xc1\xc3!pk0?\x1c`\xad\x8b\x0b\xcf\x8b\xf5b\xba\x8b\x9a\xe7\xd6\xb3[7\x8a\xeau\xc5g>\xa6<+!C \xa5\x90\xa8\xab\xaa\xe9T\x82RhV\xe81zs\xf6\xfe\xdf\xc9\xa7\x9fN\x7f9;I>\x9f\xfe\xed\xfd\xe9\x87\x9fO>$\x8b{\xfd\xf3\x98\xbcy;Dq\x851I/\xdc`\"\xe9|8\\-c\x9b\x9cE\xad\xc1\xf7\xac^\xc84+\x1aX\xaf\xf0\xbaoW?\x8c&\xa8;-\xb2c\x12\x0ez\xa8\x98\x1e\x13l9\x18[\xc4\xf5,\x12\xf5\x90\x84\xa9<\xfe\xd3\x82\xf3U/\xacW\x89\x941P\xca\xda\xf3L$\xd2Z\xfa\x88j\x84\xbf\x869\xf3\x98\xe7\x0c\x06a\x80\xff\xdc\x1e\t|\x13\xfb\xbb6\x0eVbV\xd6\x19\x9d\xd7+\xc5\x93\xba/w\xfa\xe6\xee\xe5\xf5n\x8f8\xae\xbf\xdb#\x07\xc4\xdd\xf7\x0f\xbe\xb5\xa9+\xa0\xf6\xf6\x8a\xfd&z\x12\xbf\x19\x7f\xef\x9d\xd6\xc0\xa1\x99|\xaeG\xe5=\x90\xbb\x87\x04\xf6q\xc53\xf0\xee\xd2N+\x8f\x033yDH\xd2B\x01j\xf7\x04CA=\xae8\xc2\xe8\xffG\x1c\xa2\xd2\xd3J\xa3c\x94W\x9cu\xdf\xad&\xf7w\xcd\xe9\r\xc5\xfa\xa8\xd9\x83\xe8\x9b\xb2\x07\x862ww\x081r\x97\xe0E$\x93\x0ce\xee\xc7\x93I\x86\x02\x7f\xe6d\x92\x91[I\x0f\x97K2\x14\xfe\x8bI%\x19\xc9\xdf7d\x92\x8c\xc4u>\x06DSq\rh\x9d^@3\xaa\x90\x1e\x03\xca\n\tL#F+\x05H\xe4\x8bc\xb9(K1+\xf8\xe8\xe6\xfa\xd6\xad\x1db$\x1b\x07\x93\xe52\x93\xfe\x9b U)i\x97\x82\xd1rk<c\x82\xb3JJ\xe0\xda\xce+]IPv\x92R\x05\x9b!\xc8s\x9bI\xb0\x04U\x95\xfa\x90\xd8\xd9\x1a\xc1\x92\x11\xe8\xa4A\xd9}U\xc1\x96\n\xdc\x88,'27,\xb5r\xe4\x98\xc9\xd1j-\xd4Ha\x1d\x8c\x0f\t\xe2\x83$W\xb6\xe3\xeb\x86D\x1c\xdc\x04\x8a\xedp\xde\xc6\xa1c\xa8+!Dg\xb4\xd0h\x9d^\x92\x15O*\xae\x8b2ab2-AC\xf7\x8bH\x93\"\xeb!&\xb8\x86\xaf\xba\x87fy\xa2\xb4\x90\xd0\x1aTLe\xe2a\xd5\xd4\xba\x11\xb0\xd4\xd3.\xc5\x87\xc4\xe3JQT\xcd9+\x845\xa2z\x0c\xed)\x7f\xe75\xf0\xec\x91\x8a\xeb\x07\xcd\xe8\xd4l\xcb&\x12h6_\xa4w[y4r\x8fz#_'[\x93\xd5f\xc2\xba5{\xdf\xd8\x93]M\xdcO\x16\xdd]\x08\xbe\xdc\x9d]\x1d\xbf(\xb2\xe3\x9d\xaa\xc1K\x94\xd3\xa2\x84\x0ce\x95l\x16U\xcb\x1f\xb7\xd6}\xbb\xc6\xec\xbf\xdez\xc7\xe1\xbe\xaf\x01\x98\x8f\xf3\xfe[\xc1\xde\x13\x14h\xa5\x9e?\xf0\xf2\x90\x10\xc8\xfc\xc0\x0bC\x16B\xc80P/%AHBp\x03\xe6\xfaYF\\\nA\x90\x06\x9e\x8b\xa9\x0b>\x1d\xdc@&\xe1`\xef\xab9{\x16\xae\x87\x03\xb6\xb5\xe6\xc6Y\x15\xf4\xb7\x85\xfb\xe1 \xd8y\xe7cO\x18P\x9aJ\rY\xab\xdb{O\x10'\x9f\x88.w\xb0Y\xa2\xb4\xc3\x97\x8b\x83\x9d\xb7 >\xbe\xff\xf4\xf3\xc9\x87K\x94U\x80\xb4@\x94od\xaa\x16\xc3K\x86\xd2\xf9\"7U\xfb\x9a\xf5\x10/K\x1c\x10\xe1\x9es7\xe1\xbesK\xa1ov\xb8{s3B-\xf8\x7f\xb2b#3;\xe1\xe5\x16\x1b\x99\xca\xe7w\x15\x1b\x99\n\xf6\xa5\x15\x1byO0\x13{$\xd1\xec\xaf\x140\x15\xd4K+62\x95\xc7\xef)62\x15\xeb\xf3\x17\x1by\x81\x99\xcc\xdd\x1dB\x0c\x05\xf5\xfc\xc5F\xa62\xf7\xc3\xc5F\xa6\x02\x7f\xe6b#\xef\t\xca\xc6\x1fU/?Xmd*\xfe\x17Snd&\x81\xdfPo\xe4\x1b\x13P\xf6\xfd\xe3\xcd\xfe\x94\xe1\xe5\x1f\x9e\xfb\xcf\x93^\xdbk{m\xaf\xcd\xe0\xf6\xbf\x00\x00\x00\xff\xff3\xce\x1fN\x00P\x00\x00"  # noqa: E501


def make_get_task_run_logs_response():
    """
    Based on:
        https://github.com/zapatacomputing/workflow-driver/blob/34eba4253b56266772795a8a59d6ec7edf88c65a/openapi/src/resources/task-run-logs.yaml#L13
    """

    return "bytes"


def _make_fake_workspace_data():
    return {
        "type": "str",
        "displayName": "str",
        "description": "str",
        "owner": "str",
        "createdBy": "str",
        "createdAt": "str",
        "lastAccessed": "str",
        "lastUpdated": "str",
        "tags": [],
        "status": "str",
        "tenantId": "str",
        "resourceGroupId": "str",
        "id": "str",
        "logo": "str",
        "namespace": "str",
    }


def make_list_workspaces_repsonse():
    return [_make_fake_workspace_data(), _make_fake_workspace_data()]


def _make_fake_project_data():
    return {
        "type": "str",
        "displayName": "str",
        "description": "str",
        "owner": "str",
        "createdBy": "str",
        "createdAt": "str",
        "lastAccessed": "str",
        "lastUpdated": "str",
        "tags": [],
        "status": "str",
        "tenantId": "str",
        "resourceGroupId": "str",
        "id": "str",
        "logo": "str",
        "image": "str",
        "profileName": "str",
    }


def make_list_projects_repsonse():
    return [_make_fake_project_data(), _make_fake_project_data()]
